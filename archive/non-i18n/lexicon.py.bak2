#!/usr/bin/env python3
# lexicon.py jcj 2019-02-20

'''A class to implement a lexicon with methods for prefixes and suffixes,
regular expressions, anagrams, etc. Can also be used case-insensitively'''

import bisect
import re
import os
from collections import defaultdict
BUSY_DELTA = 5
class LexiconError(Exception):
	pass

class Lexicon:

	def __init__(self, fileName, caseFold=False, busyWait=None):
		'''Initialize a sorted lexicon, with entries all in capitals
		if caseFold is True. The diskfile source is not expected
		to be sorted. Newlines are removed from all entries and
		comment lines beginning with # are stripped out. An optional
		function/method argument busyWait supports display of
		progress information.'''
		self.fileName = fileName
		self.caseFold = caseFold
		if not busyWait:
			busyWait = lambda percent, message: None
		self.words = []   # FIXME This is for a theoretical no-error design
		self.hashes = defaultdict(list)
		try:
			f = open(fileName)
		except Exception as err:
			raise LexiconError(err)
		percent = 0
		busyWait(percent, 'Reading...')
		# Read in a list of lines, without showing any progress.
		# But then use the number of words read in to time progress updates
		lines = [ line.rstrip('\n') for line in f.readlines() if not line.startswith('#') ]
		totalLines = len(lines)
		totalLines *= (4 if caseFold else 3)
		linesSoFar = 0
		if caseFold:
			busyWait(percent, 'Normalizing...')
			for i in range(len(lines)):
				linesSoFar += 1
				percent = int((linesSoFar / totalLines) * 100)
				if percent % BUSY_DELTA == 0:
					busyWait(percent, 'Normalizing...')
				lines[i] = lines[i].upper()
		busyWait(percent, 'Sorting...')
		self.words = sorted(set(lines))
		linesSoFar += len(lines)
		percent = int((linesSoFar / totalLines) * 100)
		busyWait(percent, 'Hashing...')
		for word in self.words:
			linesSoFar += 1
			percent = int((linesSoFar / totalLines) * 100)
			if percent % BUSY_DELTA == 0:
				busyWait(percent, 'Hashing...')
			hash = self.anagramHash(word)
			self.hashes[hash].append(word)
		busyWait(100, 'Done.')
		f.close()
	
	def length(self):
		'''Return the number of entries'''
		return len(self.words)

	def anagramHash(self, s):
		'''Create a unique hash for anagram purposes, ignoring
		order, letter-case, and all punctuation'''
		# Unfortunately the \w class (Unicode 'word' characters)
		# includes the underscore, so _ must be special-cased
		s = s.replace('_', '')
		# Upper-case the string, remove all characters which are not \w,
		# and sort the result: thus all anagrammatic strings get the same hash
		return ''.join(sorted(re.sub(r'\W', '', s.upper())))

	def contains(self, word):
		'''Return word itself (possibly case-folded) if present, or None'''
		if self.caseFold:
			word = word.upper()
		i = bisect.bisect_left(self.words, word)
		if i != len(self.words) and self.words[i] == word:
			return self.words[i]
		else:
			return None

	def regex(self, pattern):
		'''Return list of matching words'''
		flags = re.IGNORECASE if self.caseFold else 0
		pattern = re.compile(pattern, flags)
		matches = []
		for word in self.words:
			m = pattern.search(word)
			if m:
				matches.append(word)
		return matches

	def hasPrefix(self, prefix):
		'''Return whether there is any word that begins with prefix'''
		if self.caseFold:
			prefix = prefix.upper()
		# surprisingly, this has quite adequate performance
		for word in self.words:
			if word.startswith(prefix):
				return True
		return False

	def withPrefix(self, prefix):
		'''Return a list of words with prefix'''
		if self.caseFold:
			prefix = prefix.upper()
		return [ w for w in self.words if w.startswith(prefix) ]

	def hasSuffix(self, suffix):
		'''Return whether there is any word that ends with suffix'''
		if self.caseFold:
			suffix = suffix.upper()
		# surprisingly, this has quite adequate performance
		for word in self.words:
			if word.endswith(suffix):
				return True
		return False

	def withSuffix(self, suffix):
		'''Return a list of words with suffix'''
		if self.caseFold:
			suffix = suffix.upper()
		return [ w for w in self.words if w.endswith(suffix) ]

	def anagrams(self, word):
		'''Return a list of anagrams of word, ignoring case and punctuation''' 
		return self.hashes.get(self.anagramHash(word), [])

def main():
	print('This module is intended to be imported rather than run standalone.')
	print('Use as "import lexicon" or "from lexicon import Lexicon, LexiconError".')

if __name__ == '__main__':
	main()

